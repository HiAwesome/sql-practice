-- 连续登录天数   https://yuguiyang.github.io/2017/08/31/data-analyst-interview-sql-03/

/*
用户连续登录天数
背景描述
现在我们有一张用户登录日志表，记录用户每天的登录时间，
我们想要统计一下，用户每次连续登录的开始日期和结束日期，以及连续登录天数。
*/

CREATE TABLE tm_login_log
(
    user_id    integer,
    login_date date
);

-- 这里的数据是最简化的情况，每个用户每天只有一条登录信息，
insert into
    tm_login_log
values
    (1001, '2017-01-01'),
    (1001, '2017-01-02'),
    (1001, '2017-01-04'),
    (1001, '2017-01-05'),
    (1001, '2017-01-06'),
    (1001, '2017-01-07'),
    (1001, '2017-01-08'),
    (1001, '2017-01-09'),
    (1001, '2017-01-10'),
    (1001, '2017-01-12'),
    (1001, '2017-01-13'),
    (1001, '2017-01-15'),
    (1001, '2017-01-16'),
    (1002, '2017-01-01'),
    (1002, '2017-01-02'),
    (1002, '2017-01-03'),
    (1002, '2017-01-04'),
    (1002, '2017-01-05'),
    (1002, '2017-01-06'),
    (1002, '2017-01-07'),
    (1002, '2017-01-08'),
    (1002, '2017-01-09'),
    (1002, '2017-01-10'),
    (1002, '2017-01-11'),
    (1002, '2017-01-12'),
    (1002, '2017-01-13'),
    (1002, '2017-01-16'),
    (1002, '2017-01-17');

/*
步骤拆解
我们首先要思考，怎样才算连续登录呢？就是1号登录，2号也登录了，这样就连续2天登录，那我们怎么知道2号他有没有登录呢？
一种思路是根据排序来判断：
我们来根据日期来排个名
*/

select
	user_id,
	login_date,
	row_number() over(partition by user_id order by login_date) day_rank
from
	tm_login_log;
/*
1001	2017-01-01	1
1001	2017-01-02	2
1001	2017-01-04	3
1001	2017-01-05	4
1001	2017-01-06	5
1001	2017-01-07	6
1001	2017-01-08	7
1001	2017-01-09	8
1001	2017-01-10	9
1001	2017-01-12	10
1001	2017-01-13	11
1001	2017-01-15	12
1001	2017-01-16	13
1002	2017-01-01	1
1002	2017-01-02	2
1002	2017-01-03	3
1002	2017-01-04	4
1002	2017-01-05	5
1002	2017-01-06	6
1002	2017-01-07	7
1002	2017-01-08	8
1002	2017-01-09	9
1002	2017-01-10	10
1002	2017-01-11	11
1002	2017-01-12	12
1002	2017-01-13	13
1002	2017-01-16	14
1002	2017-01-17	15
*/

